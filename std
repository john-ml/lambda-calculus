B = λ λ λ 2 (1 0)
C = λ λ λ 2 0 1
K = λ λ 1
W = λ λ 1 0 0

S = λ λ λ λ 3 (2 1) (2 0)
I = λ 0

Y = λ (λ 1 (0 0)) (λ 1 (0 0))

compose = B
flip    = C
const   = K
on      = S
id      = I
fix     = Y
app     = λ λ 1 0

true  = const
false = flip const
or    = λ λ 1 true 0

zero  = false
succ  = λ λ λ 1 (2 1 0)
one   = succ zero
two   = succ (succ zero)
three = succ (succ (succ zero))
four  = succ (succ (succ (succ zero)))
five  = succ (succ (succ (succ (succ zero))))
six   = succ (succ (succ (succ (succ (succ zero)))))
seven = succ (succ (succ (succ (succ (succ (succ zero))))))
eight = succ (succ (succ (succ (succ (succ (succ (succ zero)))))))
nine  = succ (succ (succ (succ (succ (succ (succ (succ (succ zero))))))))
ten   = succ (succ (succ (succ (succ (succ (succ (succ (succ (succ zero)))))))))

add = λ λ λ λ 3 1 (2 1 0)
mul = λ λ 1 (add 0) zero
exp = flip app

zero? = λ 0 (const false) true

pair = λ λ λ 0 2 1
fst  = flip app true
snd  = flip app false

shift = λ pair (snd 0) (succ (snd 0))
pred  = λ fst (0 shift (pair zero zero))

nat-rec = λ λ fix λ λ (zero? 0) 3 (2 0 (1 (pred 0)))
fac = nat-rec one mul
tri = nat-rec zero add

nil  = false
cons = λ λ λ λ 1 3 (2 1 0)
nil? = λ 0 (λ λ false) true
head = λ 0 const id
tail = λ fst (0 (λ λ pair (snd 0) (cons 1 (snd 0))) (pair nil nil))

len   = λ 0 (const succ) zero
app   = add
map   = λ λ 0 (λ λ cons (3 1) 0) nil
range = λ 0 (λ cons zero (map succ 0)) (cons zero nil)
rev   = λ 0 (λ λ app 0 (cons 1 nil)) nil
rep   = λ λ 1 (cons 0) nil

curry   = λ λ λ 2 (pair 1 0)
uncurry = λ λ 1 (fst 0) (snd 0)

zip-with = fix λ λ λ λ
  (or (nil? 1) (nil? 0))
    nil
    (cons
      (2 (head 1) (head 0))
      (3 2 (tail 1) (tail 0)))
zip = zip-with pair

filter = λ λ 0 (λ λ (3 1) (cons 1 0) 0) nil
